import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InputFile
from aiogram.utils import executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import logging

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())
logging.basicConfig(level=logging.INFO)

# –í–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç DSGN Academy.\n–ù–∞–ø–∏—à–∏ –Ω–∞–º –±—É–¥—å-—â–æ –∞–±–æ –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ ‚Äî –º–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!")

# –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –í–°–Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (—Å–æ–æ–±—â–µ–Ω–∏—è, —Ñ–æ—Ç–æ, —Ñ–∞–π–ª—ã –∏ —Ç.–¥.)
@dp.message_handler(content_types=types.ContentType.ANY)
async def forward_message(message: types.Message):
    user = message.from_user
    text = f"üì© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @{user.username or user.first_name} (ID: {user.id}):"

    try:
        # –ü–µ—Ä–µ—à–ª—ë–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.forward(ADMIN_ID)
        # –û—Ç–¥–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—à–µ–º –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º
        await bot.send_message(ADMIN_ID, text)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Å–∏–ª–∫–∏: {e}")

# –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –Ω–∞–∂–∞–ª Reply –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(lambda message: message.reply_to_message and message.reply_to_message.forward_from)
async def reply_to_user(message: types.Message):
    target_id = message.reply_to_message.forward_from.id
    await bot.send_message(target_id, message.text)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
